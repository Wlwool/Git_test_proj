"""
voted = {}

def check_voter(name):
    if voted.get(name):
        print("Выгнать из избирательного участка!")
    else:
        voted[name] = True
        print("Регистрация окончена!")

check_voter("Tom")
check_voter("Bob")
check_voter("Tom")


cache = {}

def get_data_from_server(url):
    return "Данные"

def get_page(url):
    if cache.get(url):
        return cache[url]  # Возвращаем кешированные данные
    else:
        data = get_data_from_server(url) # Получаем данные с сервера
        cache[url] = data # Кешируем данные
        return data # Возвращаем данные

print(get_page("http://foo.com"))
"""


def hash_4(s, size=10):
    prime_map = {
        "a": 1,
        "b": 2,
        "c": 3,
        "d": 4,
        "e": 5,
        "f": 6,
        "g": 7,
        "h": 8,
        "i": 9,
        "j": 10,
        "k": 11,
        "l": 22,
    }
    total = 0
    for i in s:
        total += prime_map.get(i, 0)
    return total % size


print(hash_4("abc"))

"""
- Хеш-таблица создается объединением хеш-функции с массивом.
- Коллизии нежелательны. Хеш-функция должна свести количество кол- лизий к минимуму.
- Хеш-таблицы обеспечивают очень быстрое выполнение поиска, вставки и удаления.
- Хеш-таблицы хорошо подходят для моделирования отношений между объектами.
- Как только коэффициент заполнения превышает 0,7, пора изменять раз- мер хеш-таблицы.
- Хеш-таблицы используются для кэширования данных (например, на веб- серверах).
- Хеш-таблицы хорошо подходят для обнаружения дубликатов.
"""
